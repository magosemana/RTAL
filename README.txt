#### 	RTAL - Rectangular Triaxial Analysis for LIGGGHTS ####
RTAL is a Matlab script and application developped to execute the post processing of the data generated by a rectangular triaxial test. More specifically for the script LRTS developped for the DEM software LIGGGHTS located in the following repository : git@github.com:magosemana/LRTS.git . However, any rectangular triaxial test can be analysed if the data is properly formated or the file "readData.m" is modified.
RTAL was developped by Joao Chueire during PhD Studies (https://hal.science/tel-04160558).

### Runing RTAL ###
RTAL can be executed in two ways :
 	=> The application "AnalyseExe.mlapp" can be executed, prompting the user to select a log file containg the filenames and paths of the raw DEM data.
 	=> The function "Exe_NoApp.m" allows the execution of the scripts in the folder given as argument. The first section this function can be modified to select the type of analysis to be executed


### Dependencies ###
RTAL requires a Matlab installation version 2022a or higher. In addition, the following matlab add-ons must be installed (for cluster calculations): "Curve Fitting Toolbox" and "Statistics and Machine Learning Toolbox".

### Detail on Calculations ##

# Anisotropy
	-This calculation uses the contact data of the specimen to calculate : the degree of anisotropy (geometric and mechanical), ratio of horizontal or vertical contacts and coordination number.
	-This calculations run inside the "grains" class.
	########## There seems to be a problem with the anisotropy results, although I am not sure where it is wrong.

# Loops/Cluster
	- Identifies meso structures inside the specimen following the contacts between particles.For Clusters (3D case), several options can be chosen to further analyze the properties of these structures.
	- This function is executed inside the "spaceCellSystem" class. It uses a DelaunayTesselation to divide the media into tetrahedral shapes. However this is only adapted to specimens where the ratio between maximal and minal diameter is equal or inferior to 2. On the oppossite case, the contact network of the specimen may not be respected.

# Stress Tensor
	- Calculates the stress tensor using the contact and force information between grains, following the Love-Webber formulation. In the case of LIGGGHTS it is already calculated inside the DEM software and RTAL just divides the values by the volume of particles.
	- This calculations run inside the "grains" class.

# Strain Tensor 
	- Calculates the strain tensor using the contact and force information between grains. Two different formulations are used, one based on the "Space Cell System" developped by BAGI 96, and other using the average displacement field of each triangular face of the Delaunay Tesselation.
	- It can be shown (mathematically) that both calculations are equivalent, however the former calculation requires less information from the grains on the boundary thus allowing for a more precise calculation in relation to the external strain.
	- This function is executed inside the "spaceCellSystem" class. It uses a DelaunayTesselation to divide the media into tetrahedral shapes. However this is only adapted to specimens where the ratio between maximal and minal diameter is equal or inferior to 2. On the oppossite case, the contact network of the specimen may not be respected.

# Force Chains 
	- Identify the force chain structures following a procedure akin to what was proposed by PETERS 2005. In this article, force chain ramification was not treated. RTAL considers two types of force chains: single-branch and multi-branch (contain ramifications).
	- Two extra calculations can be added. The analysis of the presence of clusters around force chains (requires previous execution of Cluster function). Or the analysis of bending events (change in of each 3 particles group LIU 2020).
	- This function is calculated inside the "grains" class and can be accesed as object array properties of "forceChain" class.

# Void Ratio
	- Calculates the void ratio of the specimen. The total volume of the specimen is calculated through the piston position. The solid volume is calculated as the volume of particles.
	- A second calculation exists taking into account the volume of the cells that are used in the Cluster calculation (region between center of out-most particles and walls are excluded).
	- This function is calculated inside the "trialData" class.
# Ext Stress/Strain
	- Calculates the stress and strain state of the specimen using the data of the pistons.
	- This function is calculated inside the "trialData" class.

# Basic Info
	- Returns some basic information on the simulation like the granulometric distribution, piston displacement in time, volume variation, surface size evolution.

### Classes Specifications ###
RTAL is mostly an object oriented program. Several Classes are used store the data necessary for the calculations.

# "forceChain"
	This class contains data related to a single force chain. It is used to facilate the analysis of force chain structures. Force chains calculation run inside "grains" class.
	This class is never saved and is created when the force chain script is launched.

# "grains"
	- This class contains the data related to the granular assembly. It contains the geometrical and physical properties of the granular assembly. Calculations related to anisotropy, force chain, per grain average clusters are run inside it.
	- This class is never saved and is created individually when required.

# "partialData"
	- This class is used to do a local analysis of the specimen. It contains the specifications on the the elements located inside each partition and wher ethe limits of each partition are located.
	- This class is never saved and is created when the partition is created inside the application.

# "plotData"
	- This class is used to summarize the results of a script and prepare it to be ploted. It contain various properties detailing the type of triaxial tests it represents and the results of the analysis.
	- This class is saved alongside the plots it represents. It may be loaded alone to recreate the same figures, or together to other executions of the same function to compare results between tests.

# "singleGrain"
	- This class contains data related to a single grain. It is used to facilate the creation of force chain structures.
	- This class is never saved and is created when the force chain script is launched.

# "singleLoop"
	- This class contains data related to a single loop or cluster.
	- This class is saved in as a object array property of the spaceCellSystem.

# "spaceCell"
	- This class contains data related to a single space cell (delaunay tesselation base element). It is used for Loops/Clusters and strain calculation.
	- This class is saved as a object array property of the spaceCellSystem.

# "spaceCellSystem"
	- Space Cell system is a class calculations of strain and cluster will take place. It uses a DelaunayTesselation to divide the media into tetrahedral shapes. However this is only adapted to specimens where the ratio between maximal and minal diameter is equal or inferior to 2. On the oppossite case, the contact network of the specimen may not be respected.
	- As the calculations contained in this class take very long, objects are saved in a ".mat" file that may be read by other calculations or a second run thourgh the same process.

# "trialData"
	- This class contains the data related to the simulation apparatus. It contains all pistons displacements and forces, and is capable of calculating the applied stress and strain. Whenever a calculation requires information of outside box, this class is called.
	- This class is created when the main script is launched and is never saved.

# "app"
	- This class contains the information read from the .log file concerneaning the path and name of the files to be read. If the script is being run by the application "AnalyseExe.mlapp", the name "app" refers to the application itself. However, if "Exe_NoApp.m" is run, an object is created to mimic the application saving data in the same paths as the previous case.
	- This class is never saved and is created when the main script is launched.
