#### 	RTAL - Rectangular Triaxial Analysis for LIGGGHTS ####

RTAL is a Matlab script and application developped to execute the post processing of the data generated by a rectangular triaxial test. More specifically for the script LRTS developped for the DEM software LIGGGHTS located in the following repository : git@github.com:magosemana/LRTS.git . However, any rectangular triaxial test can be analysed if the data is properly formated or the file "readData.m" is modified

####### WARNING : ANISOTROPY FUNCTION IS WRONG AND IS BEING FIXED ######

### Runing RTAL ###
RTAL can be executed in two ways :
 	=> The application "AnalyseExe.mlapp" can be executed, prompting the user to select a log file containg the filenames and paths of the raw DEM data.
 	=> The function "Exe_NoApp.m" allows the execution of the scripts in the folder given as argument. The first section this function can be modified to select the type of analysis to be executed


### Dependencies ###
RTAL requires a Matlab installation version 2022a or higher. In addition, the following matlab add-ons must be installed : "Curve Fitting Toolbox" and "Statistics and Machine Learning Toolbox".

### Classes Specifications ###
RTAL is mostly an object oriented program. Several Classes are used store the data necessary for the calculations.

# "forceChain"
	This class contains data related to a single force chain. It is used to facilate the analysis of force chain structures. Force chains calculation run inside "grains" class.
	This class is never saved and is created when the force chain script is launched.

# "grains"
	This class contains the data related to the granular assembly. It contains the geometrical and physical properties of the granular assembly. Calculations related to anisotropy, force chain, per grain average clusters are run inside it.
	This class is never saved and is created individually when required.

# "partialData"
	This class is used to do a local analysis of the specimen. It contains the specifications on the the elements located inside each partition and wher ethe limits of each partition are located.
	This class is never saved and is created when the partition is created inside the application.

# "plotData"
	This class is used to summarize the results of a script and prepare it to be ploted. It contain various properties detailing the type of triaxial tests it represents and the results of the analysis.
	This class is saved alongside the plots it represents. It may be loaded alone to recreate the same figures, or together to other executions of the same function to compare results between tests.

# "singleGrain"
	This class contains data related to a single grain. It is used to facilate the creation of force chain structures.
	This class is never saved and is created when the force chain script is launched.

# "singleLoop"
	This class contains data related to a single loop or cluster.
	This class is saved in a object array as a property of the spaceCellSystem.

# "spaceCell"
	This class contains data related to a single space cell (delaunay tesselation base element). It is used for Loops/Clusters and strain calculation.
	This class is saved in a object array as a property of the spaceCellSystem.

# "spaceCellSystem"
	Space Cell system is a class where most of the calculations of strain and cluster will take place. For spherical grains, it is an equivalent to the Delaunay Tesselation (BAGI 96).
	As the calculations contained in this class take very long, objects are saved in a ".mat" file that may be read by other calculations or a second run thourgh the same process.

# "trialData"
	This class contains the data related to the simulation apparatus. It contains all pistons displacements and forces, and is capable of calculating the applied stress and strain. Whenever a calculation requires information of outside box, this class is called.
	This class is never saved and is created when the main script is launched.

# "app"
	This class contains the information read from the .log file concerneaning the path and name of the files to be read. If the script is being run by the application "AnalyseExe.mlapp", the name "app" refers to the application itself. However, if "Exe_NoApp.m" is run, an object is created to mimic the application saving data in the same paths as the previous case.
	This class is never saved and is created when the main script is launched.
