function exe_StressTensor(PD,app)
%INTERNALFORCES Calculates the variation of the stress in the grains
%	We will use the Love-Webber formula to calculate the intern stress
%	generated by the charging. We will be able to choose to calculate this
%	value for all the grains or just a part of them.
%	
%	p is a half/third of sum of the principal values, q is the von mises
%	stress defined by the sqrt of the second/third invariant (depends on
%	the dimensions)

%Check for Load
if isequal(PD,'LOAD');STlLoad(app);return;end

%Load values
N1=app.N1EF.Value;
N2=app.N2EF.Value;
interval=app.CalcInt.Value;
if interval==app.IntervalEF.Value && app.SimType==3
    qst=app.QcstStep(2);
    if qst>N2
        stepArray=(N1:interval:N2)';
    elseif qst<=N1
        f=find(app.TrialData.Step==N1 | app.TrialData.Step==N2);
        stepArray=app.TrialData.Step(f(1):f(2));
    else
        stepArray=(N1:interval:qst)';
        f=find(app.TrialData.Step==qst | app.TrialData.Step==N2);
        stepArray=[stepArray(1:end-1);app.TrialData.Step(f(1):f(2))];
    end
else
    stepArray=(N1:interval:N2)';
    if stepArray(end)~=N2; stepArray=[stepArray;N2];end
end
nbFiles=numel(stepArray);


%Check subdivision and do necessary calculations
if app.SubdivisionButton.Value==1
    prefix="subd";mode='SUB';
    %read partial data variables
    lMax=PD.SubLin;	
    cMax=PD.SubCol;	    
    nbSub=lMax*cMax;        %total number of extra calculations per file
else
    %prefix for file writing
    if isempty(PD);prefix="total";
    else; prefix="partial";
    end
    nbSub=0;mode='NORMAL';
end
Results=zeros(nbFiles,5,nbSub+1);%q p ,sigma X,Y,Z arrays
    
app=CalcPanel(app,'',nbFiles,'Starting calculation','on');
for i=1:nbFiles
    if getappdata(app.CalculatingPanel,'Canceling')
        CalcPanel(app,'','','','off');
        warndlg('Calculation was canceled');return
    end
    step=stepArray(i);
    app=CalcPanel(app,i,nbFiles,step);
    [gr,PD]=grains('STENSOR',step,PD,app);
    pgST=gr.PGStressTensor;
    if isempty(pgST)
        CalcPanel(app,'','','','off');
        warndlg(['PGST empty on step ' step]);return
    end
    
    %NORMAL (Global) CALCULATION  
    if ~isempty(PD)
        ST=-sum(pgST(:,:,PD.GrainsRectangle),3);
    else
        ST=-sum(pgST,3);
    end
     
    %Divide by volume
    [stV,subV] =getVolume(app.TrialData,app,step,PD);
    if isempty(stV)
        warndlg(['Partial volume is 0 at step ' step]);
        CalcPanel(app,'','','','off');return
    end
    ST=ST/stV; %over 1000 for kPa
    
    % Check existence of x direction piston, 3D efforts or 2D
    if app.checkPiston
        p=trace(ST)/3;
        q=sqrt(((ST(2,2)-ST(1,1))^2+...
            (ST(3,3)-ST(1,1))^2+...
            (ST(1,1)-ST(3,3))^2+...
            6*ST(1,2)^2+...
            6*ST(1,3)^2+...
            6*ST(2,3)^2)/2);
        Results(i,:,1)=[q p ST(1,1) ST(2,2) ST(3,3)]*10^-3; %turn into kPa
    else
        p=(ST(2,2)+ST(3,3))/2;
        q=(ST(3,3)-ST(2,2))/2;
        Results(i,:,1)=[q p 0 ST(1,1) ST(2,2)]*10^-3; %turn into kPa
    end
    
    %SUBDIVISION CALCULATION
    if nbSub>0
        for j=1:nbSub 
            if getappdata(app,'Canceling')
                CalcPanel(app,'','','','off');
                warndlg('Calculation was canceled');return
            end
            if isempty(subV(j))
                %If the subdivision is entirely above the PistonZ
                Results(i,:,1+j)=[0 0 0 0 0];
                continue;
            end
            subST=-sum(pgST(:,:,PD.SubGrains{j}),3)/(subV(j)*1000);%over 1000 for kPa
            % Check existence of x direction piston, 3D efforts or 2D
            if app.checkPiston
                p=trace(subST)/3;
                q=sqrt(((subST(2,2)-subST(1,1))^2+...
                    (subST(3,3)-subST(1,1))^2+...
                    (subST(1,1)-subST(3,3))^2+...
                    6*subST(1,2)^2+...
                    6*subST(1,3)^2+...
                    6*subST(2,3)^2)/2);
            else
                p=(subST(2,2)+subST(3,3))/2;
                q=(subST(3,3)-subST(2,2))/2;
            end
            Results(i,:,1+j)=[q p subST(1,1) subST(2,2) subST(3,3)];
        end
    end
end
CalcPanel(app,i+1,nbFiles,'','off');

%Calculate the deformation
strainExt = extStrains(app.TrialData,stepArray,N1,app,'Total');
stressExt = extStress(app.TrialData,stepArray,app);
if app.checkPiston
    stressExt=[stressExt(:,4:5) stressExt(:,1:3)];
else
    stressExt=[stressExt(:,3:4) zeros(size(stressExt,1),1) stressExt(:,1:2)];
end
consoStrain = extStrains(app.TrialData,app.ConsoStep,N1,app);

%Inflection Points
infP=[0,0,0,0];

%start writing file

filename=MakePath(app,'FORCE')+"InternalForces"+N1+"to"+N2+"interval"...
    +interval+string(app.FormatEF.Value);
fid = fopen(filename, 'w');
fprintf(fid, '## Evolution of InternalForces ##\n');
fprintf(fid, 'Simulation|Important|Values\n');
fprintf(fid, '%d|%d|%d\n',N1,N2,interval);
fprintf(fid, '%d|%d|%d\n',app.Bool3D,app.checkPiston,app.TimeStep);
fprintf(fid, '%d|%d|%d\n',consoStrain(end),app.ConsoStep*app.TimeStep,infP(1));
fprintf(fid, '%d|%d|%d\n',infP(2:4));
if nbSub==0
    fprintf(fid, '-1|-1|-1\n');
    %Add all results to a Result matrix.
    Results=[stepArray*app.TimeStep,strainExt(:,end-2),strainExt(:,end-1),...
        Results,stressExt];
    fprintf(fid,['From step %d to %d with interval %d - '...
        char(prefix) '\n'],N1,N2,interval);
    fprintf(fid, ['Step | StrainZ | StrainV | q | p | sInt1 | sInt2 |'...
        ' sInt3 | qext | pext | sExt1 | sExt2 | sExt3\n']);
    fprintf(fid, ['%d' repmat('|%d',1,12) '\n'],Results');
    fclose(fid);
    %Create plotData object
    pD = plotData("Normal",Results,app,prefix,consoStrain(end));
else
    fprintf(fid,'-1|%d|%d\n',lMax,cMax);
    %Add all results to a Result matrix. StepArray and strainArray are a
    %NbFilesx1 vector that need to be transformed into a NbFilesx1xnbSub+2.
    %extData is a NbFilesx5 matrix that will be added in the third
    %dimension to the results
    Results=[stepArray.*ones(nbFiles,1,nbSub+2)*app.TimeStep,...
        strainExt(:,end-2).*ones(nbFiles,1,nbSub+2),cat(3,Results,stressExt)]; 
    fprintf(fid, ['From step %d to %d, with %d subdivisions - %d Lines'...
        ' %d Columns\n'],N1, N2,nbSub,lMax,cMax);
    fprintf(fid, 'Step | StrainZ | q | p | sigX | sigY | sigZ\n');
    fprintf(fid, '%d|%d|%d|%d|%d|%d|%d\n',Results(:,:,1)');
    for j=2:(nbSub+2)
        fprintf(fid, 'NaN|NaN|NaN|NaN|NaN|NaN|NaN\n');
        fprintf(fid, '%d|%d|%d|%d|%d|%d|%d\n',Results(:,:,j)');
    end
    fclose(fid);
    %Create plotData object
    pD = plotData("Normal",Results,app,prefix,consoStrain(end),lMax,cMax);
end
%Call for plotter and externalforces calculation
STPloter(app,mode,pD)
end
function STlLoad(app)
%Load previously calculated InternalForces file
pD=FileLoader(app,"INTERNALFORCES");
if isempty(pD);return;end

if size(pD,2)>1
    mode='MULTI';
else
    %Check prefix
    if pD.SubL<0
        mode='NORMAL';
    else
        mode='SUB';
        %Reformat file, transform the file matrix, from a big 2D matrix
        %separated by NaN values into a 3D matrix
        file=pD.Results;
        f=find(sum(isnan(file),2));
        fl=file(1:f(1)-1,:);
        for i=2:size(f,1)
            fl=cat(3,fl,file(f(i-1)+1:f(i)-1,:));
        end
        pD.Results=fl;
    end
end

%Go for external calculation and plotting
STPloter(app,mode,pD)
end
function STPloter(app,mode,pD)
%If subdivision, start SubPlotter
if isequal(upper(mode),'SUB')
    subV=[pD.SubL,pD.SubC];
    labels=strings(1,subV(1)*subV(2)+2);
    labels(1:2)=["External" "Total partial"];
    for l=1:subV(1)
        for c=1:subV(2)
            labels((l-1)*subV(2)+c+2)="Sub l"+l+" c"+c;
        end
    end
    SubPlotter(app, 'INTSTR', pD.Results, labels,pD.ConsoStrain,subV);
    return
end  

if isequal(app.CourbePointsSwitch.Value,'On')
    lType='-+';
else
    lType='-';
end
path=MakePath(app,'FORCE');
png=".png";
%char Grec
sigma=convertCharsToStrings(char(963));
%Check title and legends option
if app.TitlesCB.Value;tit=1;else;tit=0;end
if app.LegendsCB.Value;leg=1;else;leg=0;end

%Create Figures and Axis
if(isequal(upper(mode),'NORMAL'));nb=8;else;nb=6;end
doX=1;if ~any(pD(1).Results(:,5)~=0);doX=0; nb=nb-1;end
if app.SimType==1;nb=nb-1;end
f(nb)=figure;ax(nb)=axes(f(nb));hold(ax(nb),'on');
for i=1:(nb-1)
    f(i)=figure;ax(i)=axes(f(i));hold(ax(i),'on'); %#ok<LAXES>
end
simT=0; %drained or undrained

try lw=app.PlotWidthEF.Value;
catch
    lw=1.5;
end

switch upper(mode)
    case 'NORMAL'
        file=pD.Results;
        if pD.ConsoTime>pD.N1*pD.TimeStep && pD.ConsoTime<pD.N2*pD.TimeStep
            tf=1;
        else
            tf=0;
        end
        lg=["Inner Liggghts Calculation","Ext Calculation"];
        j=1;
        %q=f(p)
        plot(ax(j),file(:,5),file(:,4),lType)
        plot(ax(j),file(:,10),file(:,9),'+')
        
            %add 3-1 line
        row=(file(:,1)==pD.ConsoTime);
        consP=file(row,5);consQ= file(row,4);maxQ=max(file(:,4));
        if app.SimType==1
            line(ax(j),[consP,consP+maxQ/3],[consQ,consQ+maxQ],'color','black')
        else
            %Interstitial pressure if sim~=1
            j=j+1;
            simT=1; %control plot parameters 
            newQ=consQ+3*(file(:,5)-consP);
            plot(ax(end),file(:,2),newQ,lType,'LineWidth',lw)
            newQ=consQ+3*(file(:,10)-consP);
            plot(ax(end),file(:,2),newQ,'o','LineWidth',lw)
        end
        
        j=j+1;
        % p = f(Ez)
        plot(ax(j),file(:,2),file(:,5),lType,'LineWidth',lw)
        plot(ax(j),file(:,2),file(:,10),'o','LineWidth',lw)
        j=j+1;
        % q = f(Ez)
        plot(ax(j),file(:,2),file(:,4),lType,'LineWidth',lw)
        plot(ax(j),file(:,2),file(:,9),'o','LineWidth',lw)
        j=j+1;
        % SigX = f(Ez)
        if doX
            plot(ax(j),file(:,2),file(:,6),lType,'LineWidth',lw)
            plot(ax(j),file(:,2),file(:,11),'o','LineWidth',lw)
            j=j+1;
        end
        
        % SigY = f(Ez)
        plot(ax(j),file(:,2),file(:,7),lType,'LineWidth',lw)
        plot(ax(j),file(:,2),file(:,12),'o','LineWidth',lw)
        j=j+1;
        % SigZ = f(Ez)
        plot(ax(j),file(:,2),file(:,8),lType,'LineWidth',lw)
        plot(ax(j),file(:,2),file(:,13),'o','LineWidth',lw)
        suffix=pD.N1+"to"+pD.N2+"interval"+pD.Interval;
        j=j+1;
        
%         %inflection points
%         infP = pD.InfPts;
%         type={'--','--','-.','-.'};
%         
        % Ev and Q = f(Ez) in two dif axes
        fnm=pD(1).Prefix+"StressAndStrain"+suffix;
        plot(ax(j),file(:,2),file(:,4),[lType 'k'],'LineWidth',lw)
        pos=ax(j).Position;
        ylabel(ax(j),'Deviatoric stress [kPa]')
        yyaxis(ax(j),'right') 
        plot(ax(j),file(:,2),file(:,3),lType,'Color','#a1a1a1','LineWidth',lw)
        ax(j).YDir='reverse';
        ylabel(ax(j),'Volumetric strain')
        ax(j).YAxis(1).Color='k';
        ax(j).YAxis(2).Color='#a1a1a1';
        if tit;title(ax(j),['Evolution of q and ' char(949) 'v']);end
        %put the x axis in the correc scale to compare to no legend ones
        f(j).Position=f(j).Position+[0 0 50 0];
        ax(j).Position=pos;
        xlabel(ax(j),'Axial Strain')
        saveas(f(j),fullfile(path,fnm+png));
        
        
        for j=1:nb
            if tf;xline(ax(j),pD.ConsoStrain,'Color','k');end
            if leg && j~=nb;legend(ax(j),lg,'location','best');end
        end
    case 'MULTI'
        maxQ=0;
        consP=zeros(size(pD,2),1);
        consQ=zeros(size(pD,2),1);
        pD(1).Prefix='multi';
        evVals=[0,0];
        qVals=[0,0];
        C=app.PlotColors;
        for i=1:size(pD,2)
            file=pD(i).Results;j=1;
            %plot1 q=f(p)
            plotMark(app,ax(j),file(:,5),file(:,4),'Color',C(i,:));j=j+1;
            %plot2 p=f(Ez)
            plotMark(app,ax(j),file(:,2),file(:,5),'Color',C(i,:));j=j+1;
            %plot3 q=f(Ez)
            plotMark(app,ax(j),file(:,2),file(:,4),'Color',C(i,:));j=j+1;
            %plot4 SigX=f(Ez)
            if doX
                plotMark(app,ax(j),file(:,2),file(:,6),'Color',C(i,:));j=j+1;
            end
            %plot5 SigY=f(Ez)
            plotMark(app,ax(j),file(:,2),file(:,7),'Color',C(i,:));j=j+1;
            %plot6 SigZ=f(Ez)
            plotMark(app,ax(j),file(:,2),file(:,8),'Color',C(i,:))
            maxQ=max(maxQ,max(file(:,4)));%get values at consolidation
            row=(file(:,1)==pD(i).ConsoTime);
            consP(i)= file(row,5);
            consQ(i)= file(row,4);
            evVals=[min([evVals(1),file(:,3)']),max([evVals(2),file(:,3)'])];
            qVals=[min([qVals(1),file(:,5)']),max([qVals(2),file(:,4)'])];
        end
        if app.SimType==1
            %Analyse consP to see how many diferent consolidation pressures
            %there are, thus how many lines have to be drawn.
            difP=0;difQ=0;k=1;
            while ~isempty(consP)
                Pi=consP(1);
                r=consP/Pi;
                t=(r>=0.95 & r<=1.05);
                difP(k)=mean(consP(t));
                difQ(k)=mean(consQ(t));           %#ok<*AGROW>
                k=k+1; 
                consP(t)=[];
            end

            %Add courbe with 1/3 inclination as q=f(p)
            for i=1:size(difP,2)
                line(ax(1),[difP(i) difP(i)+maxQ/3],[difQ(i) difQ(i)+maxQ],'color','black')
            end
        end
        suffix="";
        %legends
        if leg
            for i=1:nb
                legend(ax(i),pD.FileName,'location','best')
            end
        end

        %prepare Q and Ev plots
        nb=size(pD,2);
        fb(nb)=figure;axb(nb)=axes(fb(nb));hold(axb(nb),'on');
        for i=1:(nb-1)
            fb(i)=figure;axb(i)=axes(fb(i));hold(axb(i),'on'); %#ok<LAXES>
        end
        for i=1:size(pD,2)
            %plot7 Ev and Q = f(Ez) in two dif axes
            fnm=pD(i).FileName+"StressAndStrain";
            plot(axb(i),pD(i).Results(:,2),pD(i).Results(:,4),...
                [lType 'k'],'LineWidth',lw)
            pos=axb(i).Position;
            axb(i).YLim=qVals*1.05;
            ylabel(axb(i),'Deviatoric stress [kPa]')
            yyaxis(axb(i),'right') 
            plot(axb(i),pD(i).Results(:,2),pD(i).Results(:,3),lType,...
                'Color','#a1a1a1','LineWidth',lw)
            ylabel(axb(i),'Volumetric strain')
            axb(i).YDir='reverse';
            axb(i).YLim=evVals*1.05;
            axb(i).YAxis(1).Color='k';
            axb(i).YAxis(2).Color='#a1a1a1';
            if tit;title(axb(i),['Evolution of q and ' char(949) 'v']);end
            %put the x axis in the correc scale to compare to no legend ones
            fb(i).Position=fb(i).Position+[0 0 50 0];
            axb(i).Position=pos;
            xlabel(axb(i),'Axial Strain')
            saveas(fb(i),fullfile(path,fnm+png));
        end
end

if tit
    j=1;
    title(ax(j),'q=f(p)');j=j+1;
    if simT;title(ax(j),'Interst Pressure');j=j+1;end
    title(ax(j),'Evolution of principal stress');j=j+1;
    title(ax(j),'Evolution of deviatoric stress');j=j+1;
    title(ax(j),'Evolution of  stress X');j=j+1;
    title(ax(j),'Evolution of stress Y');j=j+1;
    title(ax(j),'Evolution of stress Z');
    
end

j=1;
% q=f(p)
ylabel(ax(j),'q [kPa]')
xlabel(ax(j),'p [kPa]')
%ax(j).YLim=[0,900];
%ax(j).XLim=[0,500];
fnm=pD(1).Prefix+"InternStress"+suffix;
saveas(f(j),fullfile(path,fnm+png));
j=j+1;

%interstital pressure if app.Simtype~=1
if simT
    ylabel(ax(j),sigma+" interst [kPa]")
    xlabel(ax(j),'Axial Strain')
    fnm=pD(1).Prefix+"sigInters"+suffix;
    saveas(f(j),fullfile(path,fnm+png));
    j=j+1;
end

% p
ylabel(ax(j),'Principal Stress [kPa]')
xlabel(ax(j),'Axial Strain')
fnm=pD(1).Prefix+"PrincipalStress"+suffix;
saveas(f(j),fullfile(path,fnm+png));
j=j+1;

% q
ylabel(ax(j),'Deviatoric Stress [kPa]')
xlabel(ax(j),'Axial Strain')
%ax(3).YLim=[0,900];
fnm=pD(1).Prefix+"DeviatoricStress"+suffix;
saveas(f(j),fullfile(path,fnm+png));
j=j+1;

% SigX
ylabel(ax(j),sigma+"x [kPa]")
xlabel(ax(j),'Axial Strain')
fnm=pD(1).Prefix+"sigX"+suffix;
saveas(f(j),fullfile(path,fnm+png));
j=j+1;

% SigY
ylabel(ax(j),sigma+"y [kPa]")
xlabel(ax(j),'Axial Strain')
fnm=pD(1).Prefix+"sigY"+suffix;
saveas(f(j),fullfile(path,fnm+png));
j=j+1;

% SigZ
ylabel(ax(j),sigma+"z [kPa]")
xlabel(ax(j),'Axial Strain')
fnm=pD(1).Prefix+"sigZ"+suffix;
saveas(f(j),fullfile(path,fnm+png));

%If legend is turned off, create a legend file that may be used as an
%outside legend
if ~leg && numel(pD)>1
    %Multi legend
    o=copyobj(f(1),0);
    l=legend(o.CurrentAxes,pD.FileName,'Orientation','horizontal');
    l.EdgeColor='none';
    set(o.CurrentAxes,'Visible','Off')
    % Set the figure Position using the normalized legend Position vector
    % as a multiplier to the figure's current position in pixels This sets
    % the figure to have the same size as the legend
    set(o,'Position',(get(l,'Position').*[0, 0, 1, 1].*get(o,'Position')));
    % The legend is still offset so set its normalized position vector to
    % fill the figure
    set(l,'Position',[0,0,1,1]);
    % Put the figure back in the middle screen area
    set(o, 'Position', get(o,'Position') + [500, 400, 0, 0]);
    saveas(o,fullfile(path,"Legend"+png));
    
    %Delete extra figures
    delete(o);
end

%Delete figures in the case of exe all
if isequal(app.LIGGGHTSAnalysisButtonGroup.SelectedObject,app.ExeAllButton)
    delete(f);
end

end
